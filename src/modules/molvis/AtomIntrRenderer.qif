// -*-Mode: C++;-*-
//
//  AtomIntrRenderer interface definition
//

#ifndef ATOM_INTR_RENDERER_QIF_INCLUDED
#define ATOM_INTR_RENDERER_QIF_INCLUDED

#include <qsys/Renderer.qif>
#include <modules/molstr/MolCoord.qif>
#include <modules/molstr/MolSelection.qif>

runtime_class AtomIntrRenderer extends Renderer
{
  client_hdr "AtomIntrRenderer.hpp";
  client_name molvis::AtomIntrRenderer;

  scriptable;
  smartptr;
  cloneable;

  /// Drawing Mode
  enumdef mode {
    simple = molvis::AtomIntrRenderer::AIR_SIMPLE;
    fancy = molvis::AtomIntrRenderer::AIR_FANCY;
  }
  property enum mode => redirect(getMode, setMode);
  default mode = "fancy";

  /// Label display flag
  property boolean showlabel => redirect(isShowLabel, setShowLabel);
  default showlabel = false;
  

  /// detail level of tesselation
  property integer detail => redirect(getDetail, setDetail);
  default detail = 5;

  property real stipple0 => redirect(getStipple0, setStipple0);
  default stipple0 = 1.0;

  property real stipple1 => redirect(getStipple1, setStipple1);
  default stipple1 = 1.0;

  property real stipple2 => redirect(getStipple2, setStipple2);
  default stipple2 = -1.0;

  property real stipple3 => redirect(getStipple3, setStipple3);
  default stipple3 = -1.0;

  property real stipple4 => redirect(getStipple4, setStipple4);
  default stipple4 = -1.0;

  property real stipple5 => redirect(getStipple5, setStipple5);
  default stipple5 = -1.0;

  /// width of lines
  property real width => redirect(getWidth, setWidth);
  default width = 0.1;

  /// color of lines
  property object<AbstractColor$> color => m_pcolor;
  default color = gfx::SolidColor::createRGB(1.0, 1.0, 0.0);

  enumdef captype_start {
    flat = molvis::AtomIntrRenderer::END_FLAT;
    sphere = molvis::AtomIntrRenderer::END_SPHERE;
    arrow = molvis::AtomIntrRenderer::END_ARROW;
  }
  property enum captype_start => redirect(getStartCapType, setStartCapType);
  default captype_start = "sphere";

  enumdef captype_end {
    flat = molvis::AtomIntrRenderer::END_FLAT;
    sphere = molvis::AtomIntrRenderer::END_SPHERE;
    arrow = molvis::AtomIntrRenderer::END_ARROW;
  }
  property enum captype_end => redirect(getEndCapType, setEndCapType);
  default captype_end = "sphere";

  /// arrow head size (height, angstrom)
  property real arrowheight => redirect(getArrowHeight, setArrowHeight);
  default arrowheight = 1.0;

  /// arrow head size (width, scale of tube width)
  property real arrowwidth => redirect(getArrowWidth, setArrowWidth);
  default arrowwidth = 2.0;

  /////////////////////////////////////
  // value label font properties

  property real font_size => m_dFontSize;
  default font_size = 12.0;

  property string font_name => m_strFontName;
  default font_name = "sans-serif";

  property string font_style => m_strFontStyle;
  default font_style = "normal";

  property string font_weight => m_strFontWgt;
  default font_weight = "normal";

  /////////////////////////////////////
  
  /// add new distance/label for atoms
  integer append(string selection1, string selection2) => appendBySelStr;
  integer appendById(integer aid1, integer mol_id2, integer mol_id2, boolean showmsg) => appendById;

  integer appendBy2Vecs(object<Vector> v1, object<Vector> v2);

  /// add new angle def
  integer appendAngleById(integer aid1, integer mol_id2, integer mol_id2, integer mol_id3, integer mol_id3) => appendAngleById;

  /// add new torsion def
  integer appendTorsionById(integer aid1, integer mol_id2, integer mol_id2, integer mol_id3, integer mol_id3, integer mol_id4, integer mol_id4) => appendTorsionById;
  
  /// remove def by ID
  boolean remove(integer id) => remove;

  /// Get JSON rep. of distance defs
  string getDefsJSON();

};

#endif

