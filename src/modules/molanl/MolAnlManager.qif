// -*-Mode: C++;-*-
//
// $Id: MolAnlManager.qif,v 1.3 2011/04/29 13:40:38 rishitani Exp $

#ifndef MOLANL_MANAGER_QIF_INCLUDED
#define MOLANL_MANAGER_QIF_INCLUDED

#include <qlib/LScrObject.qif>
#include <qlib/Matrix.qif>
#include <modules/molstr/MolCoord.qif>

runtime_class MolAnlManager
{
  client_hdr "MolAnlManager.hpp";
  client_name molanl::MolAnlManager;

  scriptable;
  singleton;

  //////////////////////////
  // molecular superposition

  /// Superpose SSM (object version)
  object<Matrix> superposeSSM1(object<MolCoord$> pmol_ref, object<MolSelection$> psel_ref, object<MolCoord$> pmol_mov, object<MolSelection$> psel_mov, boolean useprop);

  /// Superpose SSM (object ID/selection string version)
  void superposeSSM2(integer, string, integer, string);
  
  /// Superpose LSQ
  void superposeLSQ1(object<MolCoord$> pmol_ref, object<MolSelection$> psel_ref, object<MolCoord$> pmol_mov, object<MolSelection$> psel_mov, boolean useprop);

  real calcRMSD(object<MolCoord$> pmol_ref, object<MolSelection$> psel_ref, object<MolCoord$> pmol_mov, object<MolSelection$> psel_mov, string path) => calcRMSDScr;

  //////////////////////////
  // non-standard bond editor (TODO: move to moledit tool?)

  string getNostdBondsJSON(object<MolCoord$> pmol);

  void removeBond(object<MolCoord$> pmol, integer aid1, integer aid2);
  void makeBond(object<MolCoord$> pmol, integer aid1, integer aid2);

  //////////////////////////
  // Edit (TODO: move to moledit tool?)

  boolean copyAtoms(object<MolCoord$> pmol1, object<MolCoord$> pmol2, object<MolSelection$> psel2);
  
  boolean deleteAtoms(object<MolCoord$> pmol1, object<MolSelection$> psel);

  boolean changeChainName(object<MolCoord$> pmol1, object<MolSelection$> psel, string name);

  boolean shiftResIndex(object<MolCoord$> pmol1, object<MolSelection$> psel, boolean bshift, integer nval);

  boolean renumResIndex(object<MolCoord$> pmol1, object<MolSelection$> psel, boolean bshift, integer nval);
  
  //////////////////////////
  // interaction analysis

  string calcAtomContactJSON(object<MolCoord$> pMol, object<MolSelection$> pSel, real r_min, real r_max, boolean hbond, integer nMax);
  string calcAtomContact2JSON(object<MolCoord$> pMol, object<MolSelection$> pSel, object<MolSelection$> pSel2, real r_min, real r_max, boolean hbond, integer nMax);
  
  //////////////////////////
  // protein secondary structure

  void calcProt2ndry2(object<MolCoord$> pmol, boolean ignb, real dhangl1);

  void setProt2ndry(object<MolCoord$> pmol, object<MolSelection$> pSel, integer nSecType);


};

#endif // MOLANL_MANAGER_QIF_INCLUDED

